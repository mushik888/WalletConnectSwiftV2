{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/sign\/instance","title":"static var instance: SignClient","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/sign\/configure(metadata:)","title":"static func configure(metadata: AppMetadata)","type":"method"}],"path":"\/documentation\/walletconnectsign\/sign","title":"Sign","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/signclient\/logger","title":"let logger: ConsoleLogging","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/pingresponsepublisher","title":"var pingResponsePublisher: AnyPublisher<String, Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/sessiondeletepublisher","title":"var sessionDeletePublisher: AnyPublisher<(String, Reason), Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/sessioneventpublisher","title":"var sessionEventPublisher: AnyPublisher<(event: Session.Event, sessionTopic: String, chainId: Blockchain?), Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/sessionextendpublisher","title":"var sessionExtendPublisher: AnyPublisher<(sessionTopic: String, date: Date), Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/sessionproposalpublisher","title":"var sessionProposalPublisher: AnyPublisher<(proposal: Session.Proposal, context: VerifyContext?), Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/sessionrejectionpublisher","title":"var sessionRejectionPublisher: AnyPublisher<(Session.Proposal, Reason), Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/sessionrequestpublisher","title":"var sessionRequestPublisher: AnyPublisher<(request: Request, context: VerifyContext?), Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/sessionresponsepublisher","title":"var sessionResponsePublisher: AnyPublisher<Response, Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/sessionsettlepublisher","title":"var sessionSettlePublisher: AnyPublisher<Session, Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/sessionupdatepublisher","title":"var sessionUpdatePublisher: AnyPublisher<(sessionTopic: String, namespaces: [String : SessionNamespace]), Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/sessionspublisher","title":"var sessionsPublisher: AnyPublisher<[Session], Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclient\/socketconnectionstatuspublisher","title":"var socketConnectionStatusPublisher: AnyPublisher<SocketConnectionStatus, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/signclient\/approve(proposalid:namespaces:)","title":"func approve(proposalId: String, namespaces: [String : SessionNamespace]) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/cleanup()-1v3fl","title":"func cleanup() async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/cleanup()-59oic","title":"func cleanup() throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/connect(requirednamespaces:optionalnamespaces:sessionproperties:topic:)-28f9i","title":"func connect(requiredNamespaces: [String : ProposalNamespace], optionalNamespaces: [String : ProposalNamespace]?, sessionProperties: [String : String]?, topic: String) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/connect(requirednamespaces:optionalnamespaces:sessionproperties:topic:)-71nd4","title":"func connect(requiredNamespaces: [String : ProposalNamespace], optionalNamespaces: [String : ProposalNamespace]?, sessionProperties: [String : String]?, topic: String?) async throws -> WalletConnectURI?","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/disconnect(topic:)","title":"func disconnect(topic: String) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/emit(topic:event:chainid:)","title":"func emit(topic: String, event: Session.Event, chainId: Blockchain) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/extend(topic:)","title":"func extend(topic: String) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/getpairings()","title":"func getPairings() -> [Pairing]","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/getpendingrequests(topic:)","title":"func getPendingRequests(topic: String?) -> [Request]","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/getsessionrequestrecord(id:)","title":"func getSessionRequestRecord(id: RPCID) -> Request?","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/getsessions()","title":"func getSessions() -> [Session]","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/pair(uri:)","title":"func pair(uri: WalletConnectURI) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/ping(topic:)","title":"func ping(topic: String) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/reject(proposalid:reason:)","title":"func reject(proposalId: String, reason: RejectionReason) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/request(params:)","title":"func request(params: Request) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/respond(topic:requestid:response:)","title":"func respond(topic: String, requestId: RPCID, response: RPCResult) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclient\/update(topic:namespaces:)","title":"func update(topic: String, namespaces: [String : SessionNamespace]) async throws","type":"method"}],"path":"\/documentation\/walletconnectsign\/signclient","title":"SignClient","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/sessiondeletepublisher","title":"var sessionDeletePublisher: AnyPublisher<(String, Reason), Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/sessionproposalpublisher","title":"var sessionProposalPublisher: AnyPublisher<(proposal: Session.Proposal, context: VerifyContext?), Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/sessionrejectionpublisher","title":"var sessionRejectionPublisher: AnyPublisher<(Session.Proposal, Reason), Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/sessionrequestpublisher","title":"var sessionRequestPublisher: AnyPublisher<(request: Request, context: VerifyContext?), Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/sessionresponsepublisher","title":"var sessionResponsePublisher: AnyPublisher<Response, Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/sessionsettlepublisher","title":"var sessionSettlePublisher: AnyPublisher<Session, Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/sessionspublisher","title":"var sessionsPublisher: AnyPublisher<[Session], Never>","type":"property"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/socketconnectionstatuspublisher","title":"var socketConnectionStatusPublisher: AnyPublisher<SocketConnectionStatus, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/approve(proposalid:namespaces:)","title":"func approve(proposalId: String, namespaces: [String : SessionNamespace]) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/cleanup()","title":"func cleanup() async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/connect(requirednamespaces:optionalnamespaces:sessionproperties:topic:)","title":"func connect(requiredNamespaces: [String : ProposalNamespace], optionalNamespaces: [String : ProposalNamespace]?, sessionProperties: [String : String]?, topic: String) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/disconnect(topic:)","title":"func disconnect(topic: String) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/emit(topic:event:chainid:)","title":"func emit(topic: String, event: Session.Event, chainId: Blockchain) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/extend(topic:)","title":"func extend(topic: String) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/getpendingrequests(topic:)","title":"func getPendingRequests(topic: String?) -> [Request]","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/getsessionrequestrecord(id:)","title":"func getSessionRequestRecord(id: RPCID) -> Request?","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/getsessions()","title":"func getSessions() -> [Session]","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/pair(uri:)","title":"func pair(uri: WalletConnectURI) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/reject(proposalid:reason:)","title":"func reject(proposalId: String, reason: RejectionReason) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/request(params:)","title":"func request(params: Request) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/respond(topic:requestid:response:)","title":"func respond(topic: String, requestId: RPCID, response: RPCResult) async throws","type":"method"},{"path":"\/documentation\/walletconnectsign\/signclientprotocol\/update(topic:namespaces:)","title":"func update(topic: String, namespaces: [String : SessionNamespace]) async throws","type":"method"}],"path":"\/documentation\/walletconnectsign\/signclientprotocol","title":"SignClientProtocol","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/proposalnamespace\/init(chains:methods:events:)","title":"init(chains: Set<Blockchain>?, methods: Set<String>, events: Set<String>)","type":"init"},{"path":"\/documentation\/walletconnectsign\/proposalnamespace\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/proposalnamespace\/chains","title":"let chains: Set<Blockchain>?","type":"property"},{"path":"\/documentation\/walletconnectsign\/proposalnamespace\/events","title":"let events: Set<String>","type":"property"},{"path":"\/documentation\/walletconnectsign\/proposalnamespace\/methods","title":"let methods: Set<String>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/proposalnamespace\/asjsonencodedstring()","title":"func asJSONEncodedString() throws -> String","type":"method"},{"path":"\/documentation\/walletconnectsign\/proposalnamespace\/json(dateencodingstrategy:)","title":"func json(dateEncodingStrategy: JSONEncoder.DateEncodingStrategy?) throws -> String","type":"method"}],"path":"\/documentation\/walletconnectsign\/proposalnamespace\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/proposalnamespace\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/walletconnectsign\/proposalnamespace\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/walletconnectsign\/proposalnamespace","title":"ProposalNamespace","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/request\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/walletconnectsign\/request\/init(topic:method:params:chainid:expiry:)","title":"init(topic: String, method: String, params: AnyCodable, chainId: Blockchain, expiry: UInt64?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/request\/chainid","title":"let chainId: Blockchain","type":"property"},{"path":"\/documentation\/walletconnectsign\/request\/expiry","title":"let expiry: UInt64?","type":"property"},{"path":"\/documentation\/walletconnectsign\/request\/id","title":"let id: RPCID","type":"property"},{"path":"\/documentation\/walletconnectsign\/request\/method","title":"let method: String","type":"property"},{"path":"\/documentation\/walletconnectsign\/request\/params","title":"let params: AnyCodable","type":"property"},{"path":"\/documentation\/walletconnectsign\/request\/topic","title":"let topic: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/request\/asjsonencodedstring()","title":"func asJSONEncodedString() throws -> String","type":"method"},{"path":"\/documentation\/walletconnectsign\/request\/json(dateencodingstrategy:)","title":"func json(dateEncodingStrategy: JSONEncoder.DateEncodingStrategy?) throws -> String","type":"method"}],"path":"\/documentation\/walletconnectsign\/request\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/request\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/walletconnectsign\/request\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/walletconnectsign\/request","title":"Request","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/response\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/response\/chainid","title":"let chainId: String?","type":"property"},{"path":"\/documentation\/walletconnectsign\/response\/id","title":"let id: RPCID","type":"property"},{"path":"\/documentation\/walletconnectsign\/response\/result","title":"let result: RPCResult","type":"property"},{"path":"\/documentation\/walletconnectsign\/response\/topic","title":"let topic: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/response\/asjsonencodedstring()","title":"func asJSONEncodedString() throws -> String","type":"method"},{"path":"\/documentation\/walletconnectsign\/response\/json(dateencodingstrategy:)","title":"func json(dateEncodingStrategy: JSONEncoder.DateEncodingStrategy?) throws -> String","type":"method"}],"path":"\/documentation\/walletconnectsign\/response\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/walletconnectsign\/response","title":"Response","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/session\/event\/init(name:data:)","title":"init(name: String, data: AnyCodable)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/session\/event\/data","title":"let data: AnyCodable","type":"property"},{"path":"\/documentation\/walletconnectsign\/session\/event\/name","title":"let name: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/session\/event\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/walletconnectsign\/session\/event\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/walletconnectsign\/session\/event","title":"Session.Event","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/session\/proposal\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/session\/proposal\/id","title":"var id: String","type":"property"},{"path":"\/documentation\/walletconnectsign\/session\/proposal\/optionalnamespaces","title":"let optionalNamespaces: [String : ProposalNamespace]?","type":"property"},{"path":"\/documentation\/walletconnectsign\/session\/proposal\/pairingtopic","title":"let pairingTopic: String","type":"property"},{"path":"\/documentation\/walletconnectsign\/session\/proposal\/proposer","title":"let proposer: AppMetadata","type":"property"},{"path":"\/documentation\/walletconnectsign\/session\/proposal\/requirednamespaces","title":"let requiredNamespaces: [String : ProposalNamespace]","type":"property"},{"path":"\/documentation\/walletconnectsign\/session\/proposal\/sessionproperties","title":"let sessionProperties: [String : String]?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/session\/proposal\/asjsonencodedstring()","title":"func asJSONEncodedString() throws -> String","type":"method"},{"path":"\/documentation\/walletconnectsign\/session\/proposal\/json(dateencodingstrategy:)","title":"func json(dateEncodingStrategy: JSONEncoder.DateEncodingStrategy?) throws -> String","type":"method"}],"path":"\/documentation\/walletconnectsign\/session\/proposal\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/session\/proposal\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/walletconnectsign\/session\/proposal\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/walletconnectsign\/session\/proposal","title":"Session.Proposal","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/session\/accounts","title":"var accounts: [Account]","type":"property"},{"path":"\/documentation\/walletconnectsign\/session\/expirydate","title":"let expiryDate: Date","type":"property"},{"path":"\/documentation\/walletconnectsign\/session\/namespaces","title":"let namespaces: [String : SessionNamespace]","type":"property"},{"path":"\/documentation\/walletconnectsign\/session\/pairingtopic","title":"let pairingTopic: String","type":"property"},{"path":"\/documentation\/walletconnectsign\/session\/peer","title":"let peer: AppMetadata","type":"property"},{"path":"\/documentation\/walletconnectsign\/session\/topic","title":"let topic: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/session\/defaulttimetolive","title":"static var defaultTimeToLive: Int64","type":"property"}],"path":"\/documentation\/walletconnectsign\/session","title":"Session","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/sessionnamespace\/init(chains:accounts:methods:events:)","title":"init(chains: Set<Blockchain>?, accounts: Set<Account>, methods: Set<String>, events: Set<String>)","type":"init"},{"path":"\/documentation\/walletconnectsign\/sessionnamespace\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/sessionnamespace\/accounts","title":"var accounts: Set<Account>","type":"property"},{"path":"\/documentation\/walletconnectsign\/sessionnamespace\/chains","title":"var chains: Set<Blockchain>?","type":"property"},{"path":"\/documentation\/walletconnectsign\/sessionnamespace\/events","title":"var events: Set<String>","type":"property"},{"path":"\/documentation\/walletconnectsign\/sessionnamespace\/methods","title":"var methods: Set<String>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/sessionnamespace\/asjsonencodedstring()","title":"func asJSONEncodedString() throws -> String","type":"method"},{"path":"\/documentation\/walletconnectsign\/sessionnamespace\/json(dateencodingstrategy:)","title":"func json(dateEncodingStrategy: JSONEncoder.DateEncodingStrategy?) throws -> String","type":"method"}],"path":"\/documentation\/walletconnectsign\/sessionnamespace\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/sessionnamespace\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/walletconnectsign\/sessionnamespace\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/walletconnectsign\/sessionnamespace","title":"SessionNamespace","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/signclientfactory\/create(metadata:pairingclient:networkingclient:)","title":"static func create(metadata: AppMetadata, pairingClient: PairingClient, networkingClient: NetworkingInteractor) -> SignClient","type":"method"}],"path":"\/documentation\/walletconnectsign\/signclientfactory","title":"SignClientFactory","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/verifycontext","title":"VerifyContext","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/autonamespaces\/build(sessionproposal:chains:methods:events:accounts:)","title":"static func build(sessionProposal: Session.Proposal, chains: [Blockchain], methods: [String], events: [String], accounts: [Account]) throws -> [String : SessionNamespace]","type":"method"}],"path":"\/documentation\/walletconnectsign\/autonamespaces","title":"AutoNamespaces","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/autonamespaceserror\/requiredaccountsnotsatisfied","title":"case requiredAccountsNotSatisfied","type":"case"},{"path":"\/documentation\/walletconnectsign\/autonamespaceserror\/requiredchainsnotsatisfied","title":"case requiredChainsNotSatisfied","type":"case"},{"path":"\/documentation\/walletconnectsign\/autonamespaceserror\/requiredeventsnotsatisfied","title":"case requiredEventsNotSatisfied","type":"case"},{"path":"\/documentation\/walletconnectsign\/autonamespaceserror\/requiredmethodsnotsatisfied","title":"case requiredMethodsNotSatisfied","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/autonamespaceserror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/walletconnectsign\/autonamespaceserror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/autonamespaceserror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/walletconnectsign\/autonamespaceserror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/walletconnectsign\/autonamespaceserror","title":"AutoNamespacesError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/rejectionreason\/userrejected","title":"case userRejected","type":"case"},{"path":"\/documentation\/walletconnectsign\/rejectionreason\/userrejectedchains","title":"case userRejectedChains","type":"case"},{"path":"\/documentation\/walletconnectsign\/rejectionreason\/userrejectedevents","title":"case userRejectedEvents","type":"case"},{"path":"\/documentation\/walletconnectsign\/rejectionreason\/userrejectedmethods","title":"case userRejectedMethods","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/walletconnectsign\/rejectionreason\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/walletconnectsign\/rejectionreason\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/walletconnectsign\/rejectionreason","title":"RejectionReason","type":"enum"}],"path":"\/documentation\/walletconnectsign","title":"WalletConnectSign","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}